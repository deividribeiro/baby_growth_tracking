#!/usr/bin/env python3
import os
import subprocess
import argparse
from datetime import datetime
import glob


def create_latex_presentation(title, author, content, theme=None, output_filename="output"):
    """
    Generate a LaTeX beamer presentation with the given title, author, and content.

    Args:
        title (str): The title of the presentation
        author (str): The author of the presentation
        content (str): The main content of the presentation (slides)
        theme (str): The beamer theme to use
        output_filename (str): The name of the output file (without extension)

    Returns:
        str: The filename of the generated LaTeX file
    """
    # Create the LaTeX beamer presentation content
    if theme is None:
        theme_str = f"""
\\usetheme{{Madrid}}"""
    else:
        theme_str = f"""\\makeatletter
\\providecommand*{{\input@path}}{{}}
\\edef\input@path{{{{{theme}/}}\input@path}}
\\makeatother"""

    latex_content = f"""{theme_str}
\\documentclass{{beamer}}
\\usepackage[utf8]{{inputenc}}
\\usepackage{{amsmath}}
\\usepackage{{graphicx}}
\\usepackage{{hyperref}}
\\usepackage{{xcolor}}

\\usetheme{{CustomTheme}}
% \\setbeamertemplate{{navigation symbols}}{{}}  % Remove navigation symbols
\\setbeamertemplate{{footline}}[frame number]  % Add frame numbers

\\title{{{title}}}
\\author{{{author}}}
\\date{{{datetime.now().strftime('%B %d, %Y')}}}

\\begin{{document}}


\\begin{{frame}}
\\titlepage
\\end{{frame}}

%\\begin{{frame}}{{Outline}}
%\\tableofcontents
%\\end{{frame}}

{content}

\\end{{document}}
"""

    # Write the LaTeX content to a file
    tex_filename = f"{output_filename}.tex"
    with open(tex_filename, "w") as tex_file:
        tex_file.write(latex_content)

    return tex_filename


def compile_latex(tex_filename, compiler="pdflatex"):
    """
    Compile a LaTeX file to PDF.

    Args:
        tex_filename (str): The name of the .tex file to compile
        compiler (str): The LaTeX compiler to use ('pdflatex', 'xelatex', etc.)

    Returns:
        bool: True if compilation was successful, False otherwise
    """
    try:
        # Run the LaTeX compiler
        subprocess.run(
            [compiler, tex_filename],
            check=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )

        base_filename = os.path.splitext(tex_filename)[0]
        pdf_filename = f"{base_filename}.pdf"

        if os.path.exists(pdf_filename):
            print(f"Successfully compiled to {pdf_filename}")
            return True
        else:
            print("Compilation completed but PDF was not created.")
            return False

    except subprocess.CalledProcessError as e:
        print(f"Error during compilation: {e}")
        return False
    except FileNotFoundError:
        print(f"Compiler '{compiler}' not found. Make sure LaTeX is installed on your system.")
        return False


def delete_aux_files(tex_filename):
    """
    Delete auxiliary files generated during LaTeX compilation.

    Args:
        tex_filename (str): The name of the .tex file
    """
    base_filename = os.path.splitext(tex_filename)[0]
    extensions = ['.aux', '.log', '.nav', '.out', '.snm', '.toc', '.vrb', 'gz', 'fls']

    for ext in extensions:
        aux_file = f"{base_filename}{ext}"
        if os.path.exists(aux_file):
            try:
                os.remove(aux_file)
                print(f"Deleted: {aux_file}")
            except OSError as e:
                print(f"Error deleting {aux_file}: {e}")


def generate_sample_content():
    """Generate a sample beamer presentation content with image examples"""
    return """
\\section{Introduction}

\\begin{frame}{Introduction}
    \\begin{itemize}
        \\item This is a sample beamer presentation generated by Python
        \\item Perfect for creating slideshows with images
        \\item Fully customizable through Python
    \\end{itemize}
\\end{frame}

\\section{Working with Images}

\\begin{frame}{Single Image Example}
    \\begin{center}
        \\includegraphics[width=0.7\\textwidth]{example-image}

        \\small{Using the example-image package (included in most LaTeX distributions)}
    \\end{center}
\\end{frame}

\\begin{frame}{Multiple Images}
    \\begin{columns}
        \\column{0.5\\textwidth}
        \\includegraphics[width=\\textwidth]{example-image-a}

        \\column{0.5\\textwidth}
        \\includegraphics[width=\\textwidth]{example-image-b}
    \\end{columns}
\\end{frame}

\\begin{frame}{Image with Caption}
    \\begin{figure}
        \\includegraphics[width=0.8\\textwidth]{example-image-c}
        \\caption{A sample image with caption}
    \\end{figure}
\\end{frame}

\\section{Custom Images}

\\begin{frame}[fragile]{Loading Your Own Images}
    To include your own images, just place them in the same directory and reference them:

    \\begin{verbatim}
    \\includegraphics[width=0.7\\textwidth]{your-image-file}
    \\end{verbatim}

    You can use JPG, PNG, PDF formats.
\\end{frame}

\\section{Other Elements}

\\begin{frame}{Mathematical Expressions}
    Beamer supports all LaTeX math features:

    \\begin{equation}
        E = mc^2
    \\end{equation}

    \\begin{equation}
        \\int_{0}^{\\infty} e^{-x} dx = 1
    \\end{equation}
\\end{frame}

\\begin{frame}{Bullet Points and Lists}
    \\begin{itemize}
        \\item<1-> First point appears first
        \\item<2-> Second point appears second
        \\item<3-> Third point appears last
    \\end{itemize}

    \\vspace{1cm}

    \\begin{enumerate}
        \\item First numbered item
        \\item Second numbered item
        \\item Third numbered item
    \\end{enumerate}
\\end{frame}

\\begin{frame}{Table Example}
    \\begin{center}
    \\begin{tabular}{|c|c|c|}
    \\hline
    Header 1 & Header 2 & Header 3 \\\\
    \\hline
    Cell 1 & Cell 2 & Cell 3 \\\\
    \\hline
    Data A & Data B & Data C \\\\
    \\hline
    \\end{tabular}
    \\end{center}
\\end{frame}

\\section{Custom Image Directory}

\\begin{frame}[fragile]{Using Images from a Directory}
    You can specify a directory for your images:

    \\begin{verbatim}
    \\graphicspath{{./images/}}
    \\end{verbatim}

    Then reference images by name only:

    \\begin{verbatim}
    \\includegraphics[width=0.5\\textwidth]{slide1}
    \\end{verbatim}
\\end{frame}

\\begin{frame}{Conclusion}
    \\begin{itemize}
        \\item This presentation demonstrates how Python can generate Beamer slideshows
        \\item Perfect for automating presentation creation
        \\item Easy to customize with your own content and images
    \\end{itemize}

    \\vspace{1cm}

    \\centering{Thank you!}
\\end{frame}
"""


def create_custom_theme(output_dir="CustomTheme"):
    """
    Generate custom beamer theme files that match the minimalist data visualization style.

    Args:
        output_dir (str): Directory to save the theme files
    """
    # Create the theme directory if it doesn't exist
    os.makedirs(output_dir, exist_ok=True)

    # Create beamerthemeCustomTheme.sty file (main theme file)
    beamertheme_content = r"""% Custom Beamer Theme for Data Visualization
% Based on the "When does it happen?" slide with heatmap
\ProvidesPackage{beamerthemeCustomTheme}[2025/05/05 Custom Data Visualization Theme]

% Load required packages
\RequirePackage{tikz}
\RequirePackage{xcolor}

% Define colors
\definecolor{backgroundcolor}{RGB}{242, 242, 242}  % Light gray background
\definecolor{primarycolor}{RGB}{0, 0, 0}   % Black for main text
\definecolor{accentcolor1}{RGB}{226, 255, 242}  % Soft blue/purple from heatmap
\definecolor{accentcolor2}{RGB}{255, 248, 204}  % Soft yellow from heatmap
\definecolor{datapoint}{RGB}{210, 39, 48}  % Red dots in heatmap

% Use the color theme, font theme, inner theme, and outer theme
\usecolortheme{CustomTheme}
\usefonttheme{CustomTheme}
\useinnertheme{CustomTheme}
\useoutertheme{CustomTheme}

% Set overall background color
\setbeamercolor{background canvas}{bg=backgroundcolor}

% Remove navigation symbols
\setbeamertemplate{navigation symbols}{}
"""

    # Create beamercolorthemeCustomTheme.sty (color theme)
    beamercolortheme_content = r"""% Custom Color Theme for Data Visualization Beamer
\ProvidesPackage{beamercolorthemeCustomTheme}[2025/05/05 Custom Color Theme]
\RequirePackage{xcolor}

% Define colors if not already defined
\providecolor{backgroundcolor}{RGB}{242, 242, 242}  % Light gray background
\providecolor{primarycolor}{RGB}{0, 0, 0}   % Black for main text
\providecolor{accentcolor1}{RGB}{226, 255, 242}  % Soft blue/purple from heatmap
\providecolor{accentcolor2}{RGB}{255, 248, 204}  % Soft yellow from heatmap
\providecolor{datapoint}{RGB}{210, 39, 48}  % Red dots in heatmap

% Normal text colors
\setbeamercolor{normal text}{fg=primarycolor, bg=}
\setbeamercolor{alerted text}{fg=datapoint, bg=}
\setbeamercolor{example text}{fg=primarycolor!60!black, bg=}

% Title colors
\setbeamercolor{title}{fg=primarycolor, bg=}
\setbeamercolor{titlelike}{fg=primarycolor, bg=}
\setbeamercolor{subtitle}{fg=primarycolor!70!black, bg=}
\setbeamercolor{author}{fg=primarycolor!70!black, bg=}
\setbeamercolor{date}{fg=primarycolor!70!black, bg=}
\setbeamercolor{institute}{fg=primarycolor!70!black, bg=}

% Block colors
\setbeamercolor{block title}{fg=primarycolor, bg=accentcolor1!30}
\setbeamercolor{block body}{fg=primarycolor, bg=accentcolor1!10}
\setbeamercolor{block title alerted}{fg=white, bg=datapoint}
\setbeamercolor{block body alerted}{fg=primarycolor, bg=datapoint!10}
\setbeamercolor{block title example}{fg=primarycolor, bg=accentcolor2!50}
\setbeamercolor{block body example}{fg=primarycolor, bg=accentcolor2!20}

% Frame title and structure
\setbeamercolor{frametitle}{fg=primarycolor, bg=}
\setbeamercolor{framesubtitle}{fg=primarycolor!70!black, bg=}
\setbeamercolor{structure}{fg=primarycolor, bg=}

% Items and bullets
\setbeamercolor{item}{fg=primarycolor, bg=}
\setbeamercolor{item projected}{fg=white, bg=datapoint}

% Table of contents
\setbeamercolor{section in toc}{fg=primarycolor, bg=}
\setbeamercolor{subsection in toc}{fg=primarycolor!70!black, bg=}
"""

    # Create beamerfontthemeCustomTheme.sty (font theme)
    beamerfonttheme_content = r"""% Custom Font Theme for Data Visualization Beamer
\ProvidesPackage{beamerfontthemeCustomTheme}[2025/05/05 Custom Font Theme]

% Use a sans-serif font for everything
\usefonttheme{professionalfonts}
\setbeamerfont{normal text}{family=\sffamily}

% Title formatting
\setbeamerfont{title}{size=\LARGE, series=\bfseries}
\setbeamerfont{subtitle}{size=\large}
\setbeamerfont{author}{size=\normalsize}
\setbeamerfont{date}{size=\normalsize}

% Frame title formatting
\setbeamerfont{frametitle}{size=\Large, series=\bfseries}
\setbeamerfont{framesubtitle}{size=\normalsize, series=\normalfont}

% Block formatting
\setbeamerfont{block title}{size=\normalsize, series=\bfseries}
\setbeamerfont{block body}{size=\normalsize}

% Item formatting
\setbeamerfont{itemize/enumerate body}{size=\normalsize}
\setbeamerfont{itemize/enumerate subbody}{size=\normalsize}
\setbeamerfont{itemize item}{size=\normalsize}
\setbeamerfont{itemize subitem}{size=\small}

% Table of contents
\setbeamerfont{section in toc}{size=\normalsize}
\setbeamerfont{subsection in toc}{size=\normalsize}
"""

    # Create beamerinnerthemeCustomTheme.sty (inner theme)
    beamerinnertheme_content = r"""% Custom Inner Theme for Data Visualization Beamer
\ProvidesPackage{beamerinnerthemeCustomTheme}[2025/05/05 Custom Inner Theme]

% Title page
\setbeamertemplate{title page}{
  \vspace{1cm}
  \begin{center}
    {\usebeamerfont{title}\usebeamercolor[fg]{title}\inserttitle}
    \vspace{0.5cm}

    \ifx\insertsubtitle\@empty\else
      {\usebeamerfont{subtitle}\usebeamercolor[fg]{subtitle}\insertsubtitle}
      \vspace{0.5cm}
    \fi

    \ifx\insertauthor\@empty\else
      {\usebeamerfont{author}\usebeamercolor[fg]{author}\insertauthor}
      \vspace{0.5cm}
    \fi

    \ifx\insertdate\@empty\else
      {\usebeamerfont{date}\usebeamercolor[fg]{date}\insertdate}
      \vspace{0.5cm}
    \fi
  \end{center}
}

% Frame title
\setbeamertemplate{frametitle}{
  \vspace*{0.5cm}
  \begin{center}
    \usebeamerfont{frametitle}\insertframetitle
  \end{center}
  \vspace*{0.5cm}
}

% Items and enumerations
\setbeamertemplate{itemize item}{\small\raise0.5pt\hbox{\textbullet}}
\setbeamertemplate{itemize subitem}{\tiny\raise0.5pt\hbox{\textbullet}}
\setbeamertemplate{itemize subsubitem}{\tiny\raise0.5pt\hbox{\textbullet}}

% Section and subsection formatting
\AtBeginSection[]{\begin{frame}
  \frametitle{Outline}
  \tableofcontents[currentsection]
\end{frame}}
"""

    # Create beamerouterthemeCustomTheme.sty (outer theme)
    beameroutertheme_content = r"""% Custom Outer Theme for Data Visualization Beamer
\ProvidesPackage{beamerouterthemeCustomTheme}[2025/05/05 Custom Outer Theme]

% Empty header
\setbeamertemplate{headline}{}

% Footer with just the page number in corner
\setbeamertemplate{footline}{
  \begin{beamercolorbox}[wd=\paperwidth, ht=0.4cm, dp=0.2cm, right]{}
    \insertframenumber\hspace*{0.5cm}
  \end{beamercolorbox}
}

% Background
\setbeamertemplate{background}{
  \begin{tikzpicture}
    \useasboundingbox (0,0) rectangle (\paperwidth,\paperheight);
    \fill[color=backgroundcolor] (0,0) rectangle (\paperwidth,\paperheight);
  \end{tikzpicture}
}

% Empty sidebar
\setbeamertemplate{sidebar left}{}
\setbeamertemplate{sidebar right}{}
"""

    # Write the files
    with open(os.path.join(output_dir, "beamerthemeCustomTheme.sty"), "w") as f:
        f.write(beamertheme_content)

    with open(os.path.join(output_dir, "beamercolorthemeCustomTheme.sty"), "w") as f:
        f.write(beamercolortheme_content)

    with open(os.path.join(output_dir, "beamerfontthemeCustomTheme.sty"), "w") as f:
        f.write(beamerfonttheme_content)

    with open(os.path.join(output_dir, "beamerinnerthemeCustomTheme.sty"), "w") as f:
        f.write(beamerinnertheme_content)

    with open(os.path.join(output_dir, "beamerouterthemeCustomTheme.sty"), "w") as f:
        f.write(beameroutertheme_content)

    print(f"Custom beamer theme created in {output_dir}/")


def add_images_to_presentation(latex_content, image_dir=None, image_files=None):
    """
    Add a graphicspath command to the LaTeX preamble if an image directory is specified.

    Args:
        latex_content (str): The LaTeX content
        image_dir (str): Directory containing images
        image_files (list): List of image files to explicitly include

    Returns:
        str: Modified LaTeX content
    """
    modified_content = latex_content

    # Add graphicspath if a directory is specified
    if image_dir:
        # Make sure the path ends with a slash
        if not image_dir.endswith('/') and not image_dir.endswith('\\'):
            image_dir += '/'

        # Insert graphicspath right after the last \usepackage
        usepackage_pos = latex_content.rfind('\\usepackage')
        if usepackage_pos > -1:
            line_end = latex_content.find('\n', usepackage_pos)
            if line_end > -1:
                modified_content = (
                        latex_content[:line_end + 1] +
                        f"\\graphicspath{{{{{image_dir}}}}}\n" +
                        latex_content[line_end + 1:]
                )

    # Generate additional slides for each image file if specified
    if image_files and isinstance(image_files, list) and len(image_files) > 0:
        image_slides = "\n\\section{Your Images}\n\n"

        for idx, img_file in enumerate(image_files):
            # Extract filename without extension for the slide title
            img_name = os.path.splitext(os.path.basename(img_file))[0].replace('_', ' ').title()

            image_slides += f"""
\\begin{{frame}}{{Image {idx + 1}: {img_name}}}
    \\begin{{center}}
        \\includegraphics[width=0.9\\textwidth]{{{img_file}}}
    \\end{{center}}
\\end{{frame}}
"""

        # Add the image slides section before the end of the document
        end_doc_pos = modified_content.rfind('\\end{document}')
        if end_doc_pos > -1:
            modified_content = (
                    modified_content[:end_doc_pos] +
                    image_slides +
                    modified_content[end_doc_pos:]
            )

    return modified_content


def main():
    parser = argparse.ArgumentParser(description="Generate and compile LaTeX beamer presentations")
    parser.add_argument("--title", default="Generated Beamer Presentation", help="Presentation title")
    parser.add_argument("--author", default="Python LaTeX Presentation Generator", help="Presentation author")
    parser.add_argument("--theme", default="Madrid", help="Beamer theme")
    parser.add_argument("--output", default="output", help="Output filename (without extension)")
    parser.add_argument("--compiler", default="pdflatex", help="LaTeX compiler to use")
    parser.add_argument("--content-file", help="File containing the content to include")
    parser.add_argument("--image-dir", help="Directory containing images")
    parser.add_argument("--images", nargs="+", help="Specific image files to include as slides")
    parser.add_argument("--compile", action="store_true", help="Compile the presentation after creation")

    args = parser.parse_args()

    create_custom_theme()

    # Get content from file or use sample content
    if args.content_file and os.path.exists(args.content_file):
        with open(args.content_file, 'r') as f:
            content = f.read()
    else:
        if args.content_file:
            print(f"Content file '{args.content_file}' not found. Using sample content.")
        content = generate_sample_content()

    # Create the presentation
    tex_filename = create_latex_presentation(args.title, args.author, content, args.theme, args.output)
    print(f"LaTeX file created: {tex_filename}")

    # Read the generated LaTeX file
    with open(tex_filename, 'r') as f:
        latex_content = f.read()

    # Add image directory and specific images if provided
    modified_content = add_images_to_presentation(latex_content, args.image_dir, args.images)

    # Write the modified content back to the file
    with open(tex_filename, 'w') as f:
        f.write(modified_content)

    if args.compile:
        # Compile the presentation
        # Compile the presentation twice to resolve references
        compile_latex(tex_filename, args.compiler)
        success = compile_latex(tex_filename, args.compiler)
        if success:
            print("LaTeX compilation successful!")
        else:
            print("LaTeX compilation failed.")

    delete_aux_files(tex_filename)


if __name__ == "__main__":
    main()



